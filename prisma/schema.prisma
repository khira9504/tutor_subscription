// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  customerId    String?   @unique
  email         String    @unique
  name          String
  image         String
  password      String
  subscription  Subscription?
  purchases     Purchase[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TutorAccessLevelType {
  Special
  Standard
  Free
}

model Tutor {
  id            String               @id @default(cuid())
  title         String
  week          String
  time          String
  subject       String
  content       String
  image         String
  accessLevel   TutorAccessLevelType
  purchases     Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionLevelType {
  Special
  Standard
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  subscriptionId     String    @unique
  priceId            String
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  status             String
  planLevel          SubscriptionLevelType
  amount             Int       @default(0)
  period             String    @default("initial")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id            String    @id @default(cuid())
  userId        String    
  tutorId       String
  paymentIntentId   String    @unique
  amount        Int

  @@unique([userId, tutorId])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}